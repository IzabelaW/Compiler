%{
/**********************************************************************************************************************************************************************************************
                                                                                    PARSER
**********************************************************************************************************************************************************************************************/

/*=============================================================================================================================================================================================
                                                C++ Libraries, Symbol Map, Code Generator, Logic Operations, Math Operations & other C++ code
=============================================================================================================================================================================================*/

#define YYSTYPE std::string
#include <stdio.h>
#include <string>
#include <iostream>
#include <deque>
#include "SymbolMap.h"
#include "CodeGenerator.h"
#include "LogicOperations.h"
#include "MathOperations.h"
using namespace std;

extern FILE *yyin;
long long yylex(void);
%}

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                Tokens generated by Lexer
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

%token SEMICOLON ASSIGN LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
%token VAR BEGIN_PROGRAM END
%token PIDENTIFIER NUM
%token READ WRITE
%token ADD SUB
%token EQUAL NOT_EQUAL LESS LESS_EQUAL GREATER GREATER_EQUAL
%token IF THEN ELSE ENDIF
%token WHILE DO ENDWHILE
/*%token FOR FROM TO DOWNTO ENDFOR */

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                            Grammar and associated actions
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

%%
program:                    VAR vdeclarations BEGIN_PROGRAM commands END            { generateCode("HALT"); printCode(); }
                            ;
vdeclarations:              vdeclarations PIDENTIFIER                               { installIdentifier($2); }
                            /* | vdeclarations PIDENTIFIER LEFT_SQUARE_BRACKET NUM RIGHT_SQUARE_BRACKET*/
                            | /*empty*/
                            ;
commands:                   commands command
                            | command
                            ;
command:                    identifier ASSIGN expression SEMICOLON                  { if (!isNumber($3)){
                                                                                         if (symbolExists($3))
                                                                                             checkContext("STORE", $1);
                                                                                         else {
                                                                                            string errorStr = "Niezadeklarowana zmienna " + $3 + "!";
                                                                                            const char* error = errorStr.c_str();
                                                                                            yyerror(error);
                                                                                         }
                                                                                      }
                                                                                      else {
                                                                                         checkContext("STORE", $1);
                                                                                      }
                                                                                    }
                            | IF condition THEN                                     { pushOnIntStack();
                                                                                      generateCode("JZERO ?");
                                                                                    }
                              commands innerIf
                            | WHILE                                                 { pushOnWhileStack(); }
                              condition DO                                          { pushOnWhileStack();
                                                                                      generateCode("JZERO ?");
                                                                                    }
                              commands ENDWHILE                                     { int index  = popFromWhileStack();
                                                                                      int endLine = getNumberOfAsmInstructions()+1;
                                                                                      changeCodeAtLine("JZERO " + to_string(endLine), index);
                                                                                      int conditionLine = popFromWhileStack();
                                                                                      generateCodeAtAddress("JUMP", conditionLine);
                                                                                    }
/*                            | FOR pidentifier FROM value TO value DO commands ENDFOR
                            | FOR pidentifier FROM value DOWNTO value DO commands ENDFOR*/
                            | READ identifier SEMICOLON                             { generateCode("GET");
                                                                                      checkContext("STORE", $2);
                                                                                    }
                            | WRITE value SEMICOLON                                 { if(!isNumber($2))
                                                                                         checkContext("LOAD", $2);
                                                                                      else
                                                                                         loadNumber(stoll($2));
                                                                                      generateCode("PUT");
                                                                                    }
                            ;
innerIf:                    ELSE                                                    {
                                                                                       int index  = popFromIntStack();
                                                                                       pushOnIntStack();
                                                                                       generateCode("JUMP ?");
                                                                                       int actualLine = getNumberOfAsmInstructions();
                                                                                       changeCodeAtLine("JZERO " + to_string(actualLine), index);
                                                                                    }
                            commands
                            ENDIF                                                   {
                                                                                      int index  = popFromIntStack();
                                                                                      int actualLine = getNumberOfAsmInstructions();
                                                                                      changeCodeAtLine("JUMP " + to_string(actualLine), index);
                                                                                    }
                            | ENDIF                                                 {
                                                                                      int index  = popFromIntStack();
                                                                                      int actualLine = getNumberOfAsmInstructions();
                                                                                      changeCodeAtLine("JZERO " + to_string(actualLine), index);
                                                                                    }
                            ;
expression:                 value                                                   { if (isNumber($1))
                                                                                         loadNumber(stoll($1)); }
                            | value ADD value                                       { addValues($1, $3); }
                            | value SUB value                                       { subValues($1, $3); }
                            ;
/*                            | value '*' value
                            | value '/' value
                            | value '%' value
                            ;*/
condition:                  value EQUAL value                                       { equal($1, $3);            }
                            | value NOT_EQUAL value                                 { notEqual($1, $3);         }
                            | value LESS value                                      { lessThan($1, $3);         }
                            | value GREATER value                                   { greaterThan($1, $3);      }
                            | value LESS_EQUAL value                                { lessEqualThan($1, $3);    }
                            | value GREATER_EQUAL value                             { greaterEqualThan($1, $3); }
                            ;
value:                      NUM
                            | identifier
                            ;
identifier:                 PIDENTIFIER
                            ;
/*                            | pidentifier'['pidentifier']'
                            | pidentifier'['num']'
                            ; */
%%

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                            Main function
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

int main(void) {
    yyparse();
}
