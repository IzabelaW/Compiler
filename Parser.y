%{
/**********************************************************************************************************************************************************************************************
                                                                                        PARSER
**********************************************************************************************************************************************************************************************/

/*=============================================================================================================================================================================================
                                                C++ Libraries, Symbol Map, Code Generator, Logic Operations, Math Operations & other C++ code
=============================================================================================================================================================================================*/

#include <stdio.h>
#include <string>
#include <iostream>
#include <deque>
using namespace std;

extern FILE *yyin;
long long yylex(void);

struct Value {
    bool isArray;
    bool isVariableIterator;
    bool isConstantIterator;
    bool isNumber;
    bool isVariable;
    string number;
    string variable;
    string arrayName;
    string variableIterator;
    long long constantIterator;
};

#include "SymbolMap.h"
#include "CodeGenerator.h"
#include "LogicOperations.h"
#include "MathOperations.h"
%}

%union {
    struct Value* value;
    char* string;
};

%type <value> value
%type <value> expression
%type <value> identifier

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                                Tokens generated by Lexer
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

%token <string> NUM
%token <string> PIDENTIFIER
%token SEMICOLON ASSIGN LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
%token VAR BEGIN_PROGRAM END
%token READ WRITE
%token ADD SUB
%token EQUAL NOT_EQUAL LESS LESS_EQUAL GREATER GREATER_EQUAL
%token IF THEN ELSE ENDIF
%token WHILE DO ENDWHILE
%token FOR FROM TO DOWNTO ENDFOR
%token INVALID_NUM INVALID_SYMBOL ERROR

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                            Grammar and associated actions
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

%%
program:                    VAR vdeclarations BEGIN_PROGRAM commands END                                {   
                                                                                                            generateCode("HALT"); 
                                                                                                            printCode(); 
                                                                                                        }
                            ;
vdeclarations:              vdeclarations PIDENTIFIER                                                   {   installIdentifier($2);          }
                            | vdeclarations PIDENTIFIER'['NUM']'                                        {   installArray($2, stoll($4));    
                                                                                                            loadNumber(getSymbol($2) + 1);
                                                                                                            generateCodeAtAddress("STORE", getSymbol($2));
                                                                                                        } 
                            |
                            ;
commands:                   commands command
                            | command
                            ;
command:                    identifier                                              {
                                                                                        if ($1->isArray == true){
                                                                                            loadArray($1);
                                                                                            generateCodeAtAddress("STORE",0);
                                                                                        }
                                                                                    }
                            ASSIGN expression ';'                                   {
                                                                                        if ($1->isArray == true){
                                                                                            generateCodeAtAddress("STOREI",0);
                                                                                        }
                                                                                        if ($1->isVariable == true){
                                                                                            checkContext("STORE", $1->variable);
                                                                                            assignSymbol($1->variable);
                                                                                        }
                                                                                    }
                            | IF condition THEN                                     { 
                                                                                        pushOnIntStack();
                                                                                        generateCode("JZERO ?");
                                                                                    }
                              commands innerIf
                            | WHILE                                                 {   pushOnWhileStack(); }
                              condition DO                                          { 
                                                                                        pushOnWhileStack();
                                                                                        generateCode("JZERO ?");
                                                                                    }
                              commands ENDWHILE                                     { 
                                                                                        int index  = popFromWhileStack();
                                                                                        int endLine = getNumberOfAsmInstructions()+1;
                                                                                        changeCodeAtLine("JZERO " + to_string(endLine), index);
                                                                                        int conditionLine = popFromWhileStack();
                                                                                        generateCodeAtAddress("JUMP", conditionLine);
                                                                                    }
/*                            | FOR pidentifier FROM value TO value DO commands ENDFOR
                            | FOR pidentifier FROM value DOWNTO value DO commands ENDFOR*/
                            | READ identifier ';'                                   {
                                                                                        if($2->isArray == true){
                                                                                            loadArray($2);
                                                                                            generateCodeAtAddress("STORE", 0);
                                                                                        }
                                                                                        generateCode("GET");
                                                                                        if ($2->isVariable == true){
                                                                                            checkContext("STORE", $2->variable);
                                                                                            assignSymbol($2->variable);
                                                                                        }
                                                                                        else if ($2->isArray == true){
                                                                                            generateCodeAtAddress("STOREI",0);
                                                                                        }
                                                                                    }
                            | WRITE value ';'                                       { 
                                                                                        if($2->isVariable == true){
                                                                                            checkIfSymbolIsAssigned($2->variable);
                                                                                            checkContext("LOAD", $2->variable);
                                                                                        }
                                                                                        else if ($2->isNumber == true)
                                                                                            loadNumber(stoll($2->number));
                                                                                        else if ($2->isArray == true){
                                                                                            loadArray($2);
                                                                                            generateCodeAtAddress("STORE",0);
                                                                                            generateCodeAtAddress("LOADI",0);
                                                                                        }
                                                                                        generateCode("PUT");
                                                                                    }
                            ;
innerIf:                    ELSE                                                    {
                                                                                        int index  = popFromIntStack();
                                                                                        pushOnIntStack();
                                                                                        generateCode("JUMP ?");
                                                                                        int actualLine = getNumberOfAsmInstructions();
                                                                                        changeCodeAtLine("JZERO " + to_string(actualLine), index);
                                                                                    }
                            commands
                            ENDIF                                                   {
                                                                                        int index  = popFromIntStack();
                                                                                        int actualLine = getNumberOfAsmInstructions();
                                                                                        changeCodeAtLine("JUMP " + to_string(actualLine), index);
                                                                                    }
                            | ENDIF                                                 {
                                                                                        int index  = popFromIntStack();
                                                                                        int actualLine = getNumberOfAsmInstructions();
                                                                                        changeCodeAtLine("JZERO " + to_string(actualLine), index);
                                                                                    }
                            ;
expression:                 value                                                   {
                                                                                        if ($1->isNumber == true)
                                                                                            loadNumber(stoll($1->number));
                                                                                        else if ($1->isVariable == true){
                                                                                            checkIfSymbolIsAssigned($1->variable);
                                                                                            if (wasAssigned($1->variable)){
                                                                                                checkContext("LOAD", $1->variable);
                                                                                            }
                                                                                        }
                                                                                        else if ($1->isArray == true){
                                                                                            loadArray($1);
                                                                                            generateCodeAtAddress("STORE",0);
                                                                                            generateCodeAtAddress("LOADI",0);
                                                                                        }
                                                                                    }
                            | value '+' value                                       {   addValues($1, $3); }
                            | value '-' value                                       {   subValues($1, $3); }
                            ;
/*                          | value '*' value
                            | value '/' value
                            | value '%' value
                            ; */
condition:                  value EQUAL value                                       {   equal($1, $3);            }
                            | value NOT_EQUAL value                                 {   notEqual($1, $3);         }
                            | value LESS value                                      {   lessThan($1, $3);         }
                            | value GREATER value                                   {   greaterThan($1, $3);      }
                            | value LESS_EQUAL value                                {   lessEqualThan($1, $3);    }
                            | value GREATER_EQUAL value                             {   greaterEqualThan($1, $3); }
                            ;
value:                      NUM                                                     {   
                                                                                        Value* newValue = new Value;
                                                                                        newValue->isArray = false;
                                                                                        newValue->isVariable = false;
                                                                                        newValue->isNumber = true;
                                                                                        newValue->number = $1;
                                                                                        $$ = newValue;
                                                                                    }
/*                            | INVALID_NUM                                         {   yyerror("Niewłaściwy znak '-'!"); }*/
                            | identifier                                            
                            ;
identifier:                 PIDENTIFIER                                             {   
                                                                                        checkIfSymbolIsDeclared($1);
                                                                                        if (symbolExists($1)){
                                                                                            Value* newValue = new Value;
                                                                                            newValue->isArray = false;
                                                                                            newValue->isVariable = true;
                                                                                            newValue->isNumber = false;
                                                                                            newValue->variable = $1;
                                                                                            $$ = newValue;
                                                                                        }
                                                                                    }
                            | PIDENTIFIER'['PIDENTIFIER']'                          {
                                                                                        checkIfArrayIsDeclared($1);
                                                                                        if (arrayExists($1)){
                                                                                            checkIfSymbolIsDeclared($3);
                                                                                            checkIfSymbolIsAssigned($3);
                                                                                            if(symbolExists($3) && wasAssigned($3)){
                                                                                                Value* newValue = new Value;
                                                                                                newValue->isArray = true;
                                                                                                newValue->isVariableIterator = true;
                                                                                                newValue->isConstantIterator = false;
                                                                                                newValue->isVariable = false;
                                                                                                newValue->isNumber = false;
                                                                                                newValue->arrayName = $1;
                                                                                                newValue->variableIterator = $3;
                                                                                                $$ = newValue;
                                                                                            }
                                                                                        }
                                                                                    }
                            | PIDENTIFIER'['NUM']'                                  {
                                                                                        checkIfArrayIsDeclared($1);
                                                                                        if (arrayExists($1)){
                                                                                            Value* newValue = new Value;
                                                                                            newValue->isArray = true;
                                                                                            newValue->isVariableIterator = false;
                                                                                            newValue->isConstantIterator = true;
                                                                                            newValue->isVariable = false;
                                                                                            newValue->isNumber = false;
                                                                                            newValue->arrayName = $1;
                                                                                            newValue->constantIterator = stoll($3);
                                                                                            $$ = newValue;
                                                                                        }
                                                                                    }
                            ; 
%%

/*---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                            Main function
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/

int main(void) {
    yyparse();
}
